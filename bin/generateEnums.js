#!/usr/bin/env node

function main(argv) {
  const fs = require("fs")
  const utils = require("graphql/utilities")
  const isEnumType = require("graphql/type").isEnumType

  const schemaArgv = process.argv.indexOf("--schema")
  const outputArgv = process.argv.indexOf("--output")

  const schemaPath = process.argv[schemaArgv + 1]
  const outputPath = process.argv[outputArgv + 1]

  console.info(schemaPath, outputPath)

  const typeMap = utils.buildSchema(fs.readFileSync(schemaPath).toString()).getTypeMap()
  const enums = Object.keys(typeMap)
    .reduce((p, name) => {
      const type = typeMap[name]
      if (!name.startsWith("__") && isEnumType(type)) {
        p.push(
          `export const ${name} = {\n${type
            .getValues()
            .map(e => `  ${e.name}: "${e.name}"`)
            .join(",\n")}\n};`
        )
      }
      return p
    }, [])
    .sort()

  fs.writeFileSync(
    outputPath,
    `// AUTOGENERATED FROM ${schemaPath} - DO NOT EDIT
/* eslint-disable */
/* prettier-ignore-start */
${enums.join("\n\n")}
/* prettier-ignore-end */`
  )

  console.info(`Updated: ${outputPath}`)
}

const yargs = require("yargs")
const argv = yargs
  .usage("Generate Enums from a schema.graphql file\n\n" + "$0 --schema <path> --output <path>")
  .options({
    schema: {
      array: false,
      type: "string",
      demandOption: true,
      describe: "Path to schema.graphql"
    },
    output: {
      array: false,
      type: "string",
      demandOption: true,
      describe: "Output file"
    }
  })
  .help().argv

main(argv).catch(error => {
  console.error(String(error.stack || error))
  process.exit(1)
})
